import * as class_variance_authority_dist_types from 'class-variance-authority/dist/types';
import * as React from 'react';
import React__default, { HTMLProps } from 'react';
import { VariantProps } from 'class-variance-authority';
import { ClassValue } from 'clsx';

declare const buttonVariants: (props?: ({
    variant?: "default" | "destructive" | "outline" | "subtle" | "ghost" | "link" | "withRing" | null | undefined;
    size?: "default" | "sm" | "lg" | null | undefined;
} & class_variance_authority_dist_types.ClassProp) | undefined) => string;
interface ButtonProps extends React__default.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {
    href?: string;
    target?: string;
}
declare const Button: React__default.ForwardRefExoticComponent<ButtonProps & React__default.RefAttributes<HTMLButtonElement>>;

declare const headerVariants: (props?: ({
    variant?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | null | undefined;
    colors?: "primary" | "secondary" | "tertiary" | "danger" | "warning" | "success" | "info" | "dark" | "light" | null | undefined;
    weight?: "bold" | "light" | "thin" | "normal" | "medium" | "semibold" | "extrabold" | "black" | null | undefined;
    align?: "left" | "center" | "right" | "justify" | null | undefined;
    transform?: "uppercase" | "lowercase" | "capitalize" | "normalcase" | null | undefined;
    decoration?: "underline" | "lineThrough" | "noUnderline" | null | undefined;
    quickie?: "q_grad_watermelone" | "q_grad_aqua" | "q_grad_rasta" | "q_grad_lemon" | "q_grad_rose" | "q_line" | "q_line_sync" | "qc_leanFull" | "qc_leanLeft" | "qc_leanRight" | "qc_leanHalf" | "qc_leanLeftHalf" | "qc_leanRightHalf" | "qc_short" | "qc_shortLeft" | "qc_shortRight" | "shortCenter" | "qc_shortJustify" | null | undefined;
    sectionWidth?: "full" | "half" | "third" | "fourth" | null | undefined;
    animations?: "x_wave" | "x_jello" | "x_rubberBand" | "x_flash" | "x_wiggle" | "x_bounce" | "x_spin" | "x_pulse" | "x_ping" | null | undefined;
} & class_variance_authority_dist_types.ClassProp) | undefined) => string;
interface HeadingProps$1 extends React.HTMLAttributes<HTMLHeadingElement>, VariantProps<typeof headerVariants> {
}
declare const Heading: React.ForwardRefExoticComponent<HeadingProps$1 & React.RefAttributes<HTMLHeadingElement>>;

declare const paraVariants: (props?: ({
    variant?: "default" | "darkGlass" | "glass" | "bg" | "bgGlass" | "transparent" | null | undefined;
    colors?: "primary" | "secondary" | "tertiary" | "danger" | "warning" | "success" | "info" | "dark" | "light" | null | undefined;
    badge?: "default" | "secondary" | "tertiary" | "danger" | "warning" | "success" | "info" | "dark" | "light" | null | undefined;
    sizes?: "sm" | "lg" | "md" | "xl" | null | undefined;
    weight?: "bold" | "light" | "thin" | "normal" | "medium" | "semibold" | "extrabold" | "black" | null | undefined;
    align?: "left" | "center" | "right" | "justify" | null | undefined;
    transform?: "uppercase" | "lowercase" | "capitalize" | "normalcase" | null | undefined;
    decoration?: "underline" | "lineThrough" | "noUnderline" | null | undefined;
    bg?: boolean | null | undefined;
} & class_variance_authority_dist_types.ClassProp) | undefined) => string;
interface HeadingProps extends React.HTMLAttributes<HTMLParagraphElement>, VariantProps<typeof paraVariants> {
}
declare const Paragraph: React.ForwardRefExoticComponent<HeadingProps & React.RefAttributes<HTMLHeadingElement>>;

declare function cn(...inputs: ClassValue[]): string;
declare const tableVariants: (props?: ({
    variant?: "default" | "bg" | "border" | null | undefined;
    padding?: "all" | "left" | "right" | null | undefined;
    alignmentment?: "left" | "center" | "right" | null | undefined;
} & class_variance_authority_dist_types.ClassProp) | undefined) => string;
declare const tableHeadVariants: (props?: ({
    variant?: "default" | "bg" | "border" | null | undefined;
    alignment?: "left" | "center" | "right" | null | undefined;
} & class_variance_authority_dist_types.ClassProp) | undefined) => string;
declare const tableBodyVariants: (props?: ({
    variant?: "default" | "bg" | "border" | null | undefined;
    alignment?: "left" | "center" | "right" | null | undefined;
} & class_variance_authority_dist_types.ClassProp) | undefined) => string;
declare const tdVariants: (props?: ({
    variant?: "default" | "bg" | "border" | null | undefined;
    padding?: "all" | "left" | "right" | null | undefined;
} & class_variance_authority_dist_types.ClassProp) | undefined) => string;
declare const thVariants: (props?: ({
    variant?: "default" | "bg" | "border" | null | undefined;
    padding?: "all" | "left" | "right" | null | undefined;
} & class_variance_authority_dist_types.ClassProp) | undefined) => string;
declare const trVariants: (props?: ({
    variant?: "default" | "bg" | "border" | null | undefined;
    padding?: "all" | "left" | "right" | null | undefined;
} & class_variance_authority_dist_types.ClassProp) | undefined) => string;
interface TableProps extends HTMLProps<HTMLTableElement>, VariantProps<typeof tableVariants> {
    children: React__default.ReactNode;
    className?: string;
}
declare const Table: React__default.FC<TableProps>;
interface TableHeadProps extends HTMLProps<HTMLTableSectionElement>, VariantProps<typeof tableHeadVariants> {
    children: React__default.ReactNode | null;
    className?: string;
}
declare const TableHead: React__default.FC<TableHeadProps>;
interface TableBodyProps extends HTMLProps<HTMLTableSectionElement>, VariantProps<typeof tableBodyVariants> {
    children: React__default.ReactNode | null;
    className?: string;
}
declare const TableBody: React__default.FC<TableBodyProps>;
interface tdProps extends HTMLProps<HTMLTableCellElement>, VariantProps<typeof tdVariants> {
    children: React__default.ReactNode | null;
    className?: string;
}
declare const Td: React__default.FC<tdProps>;
interface thProps extends HTMLProps<HTMLTableCellElement>, VariantProps<typeof thVariants> {
    children: React__default.ReactNode | null;
    className?: string;
}
declare const Th: React__default.FC<thProps>;
interface trProps extends HTMLProps<HTMLTableRowElement>, VariantProps<typeof trVariants> {
    children: React__default.ReactNode | null;
    className?: string;
}
declare const Tr: React__default.FC<trProps>;

export { Button, Heading, Paragraph, Table, TableBody, TableBodyProps, TableHead, TableHeadProps, TableProps, Td, Th, Tr, cn, tdProps, thProps, trProps };
